# -*- coding: utf-8 -*-
"""Untitled26.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1KGJUsFJWt7Zx5OAl5D17migyzCHZpWQf
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

def my_sigmoid(X):
    try: 
        f = 1 / (1+np.exp(-X))
    except Exception as e:
        print(e)
    else:
       return f

def my_tanh(X):
  try: 
      f = (np.exp(X)-np.exp(-X))/(np.exp(X)+np.exp(-X))
  except Exception as e:
      print(e)
  else:
      return f

def my_softsign(X):
  try: 
      f = X/(np.abs(X)+1)
  except Exception as e:
      print(e)
  else:
      return f

def my_relu(X):
  if X >= 0:
    return X
  else:
    return 0

def my_softplus(X):
  try: 
      f = np.log(np.exp(X)+1)
  except Exception as e:
      print(e)
  else:
      return f

# Plot Sigmoid Function
X = np.arange(-10,10,0.1)
y = my_sigmoid(X)
plt.plot(X,y)
plt.grid()

# Plot Sigmoid Function
X = np.arange(-10,10,0.1)
y = my_sigmoid(X)
y_div = y*(1-y)
X_norm = X/10
plt.plot(X,y)
plt.plot(X,y_div)
# plt.plot(X, X_norm)
plt.grid()

# plot tanh function
X = np.arange(-10,10,0.1)
y = my_tanh(X)
plt.plot(X,y)
plt.grid()

# plot tanh function
X = np.arange(-10,10,0.1)
y = my_tanh(X)
y_div = 1 - y**2
plt.plot(X,y)
plt.plot(X,y_div)
plt.grid()

# plot softsign function
X = np.arange(-10,10,0.1)
y = my_softsign(X)
y_div = 1 / (np.abs(X)+1)**2
plt.plot(X,y)
plt.plot(X,y_div)
plt.grid()

# plot relu function
X = np.arange(-3,3,0.1)
y = [my_relu(x) for x in X]
y_div = [1 if x >= 0 else 0 for x in X ]
plt.plot(X,y)
plt.plot(X,y_div)
plt.grid()

# plot softplus function
X = np.arange(-3,3,0.1)
y = my_softplus(X)
y_div = 1 / (np.exp(-X)+1)
plt.plot(X,y)
plt.plot(X,y_div)
plt.grid()

img=plt.imread("/content/ai_brain.jpg")
plt.imshow(img)

img_new= my_sigmoid(img)
img_new_1= img_new*255
plt.imshow(img_new_1.astype(int))

img_new= my_softsign(img)
img_new_1= img_new*255
plt.imshow(img_new_1.astype(int))

img_new= my_softplus(img)
img_new_1= img_new*255
plt.imshow(img_new_1.astype(int))

